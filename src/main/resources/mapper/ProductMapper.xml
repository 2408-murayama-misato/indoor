<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.indoor.mapper.ProductMapper">
    <select id="find" resultType="com.example.indoor.entity.Product">
        SELECT * FROM products WHERE id = #{id}
    </select>
    <select id="findById" resultMap="Product">
        SELECT *
        FROM products
        WHERE id = ${productId}
    </select>
    <resultMap id="Product" type="com.example.indoor.entity.Product">
        <result column="id" property="id"/>
        <result column="account_id" property="accountId"/>
        <result column="name" property="name"/>
        <result column="price" property="price"/>
        <result column="category" property="category"/>
        <result column="stock" property="stock"/>
        <result column="isStopped" property="isStopped"/>
        <result column="description" property="description"/>
        <result column="image_pass" property="imagePass"/>
        <result column="created_date" property="createdDate"/>
        <result column="updated_date" property="updatedDate"/>
        <result column="avg" property="avg"/>
    </resultMap>
    <insert id="insertProduct" parameterType="com.example.indoor.entity.Product">
        INSERT INTO products (
            account_id,
            name,
            price,
            category,
            stock,
            is_stopped,
            description,
            image_pass,
            created_date,
            updated_date
        ) VALUES (
            #{accountId},
            #{name},
            #{price},
            #{category},
            #{stock},
            #{isStopped},
            #{description},
            #{imagePass},
            DEFAULT,
            DEFAULT
        )
    </insert>
    <update id="updateProduct" parameterType="com.example.indoor.entity.Product">
        UPDATE products
        SET
            name = #{name},
            price = #{price},
            category = #{category},
            stock = #{stock},
            is_stopped = #{isStopped},
            description = #{description},
            image_pass = #{imagePass},
            updated_date = DEFAULT
        WHERE id = #{id}
    </update>
    <!-- 内部結合 -->
    <resultMap id="productDetail" type="com.example.indoor.entity.Product">
        <result column="id" property="id" />
        <result column="account_id" property="accountId" />
        <result column="account_name" property="accountName" />
        <result column="product_name" property="name" />
        <result column="price" property="price" />
        <result column="category" property="category" />
        <result column="stock" property="stock" />
        <result column="is_stopped" property="isStopped" />
        <result column="description" property="description" />
        <result column="image_pass" property="imagePass" />
    </resultMap>
    <select id="findProductDetail" resultMap="productDetail">
        SELECT
            products.id AS id,
            products.account_id AS account_id,
            accounts.name AS account_name,
            products.name AS product_name,
            products.price AS price,
            products.category AS category,
            products.stock AS stock,
            products.is_stopped AS is_stopped,
            products.description AS description,
            products.image_pass AS image_pass
        FROM products
        INNER JOIN accounts
        ON accounts.id = products.account_id
        WHERE products.id = #{id}
    </select>
    <select id="findProductDisplay" resultMap="productDetail">
        SELECT
            products.id AS id,
            products.account_id AS account_id,
            accounts.name AS account_name,
            products.name AS product_name,
            products.price AS price,
            products.category AS category,
            products.stock AS stock,
            products.is_stopped AS is_stopped,
            products.description AS description,
            products.image_pass AS image_pass
        FROM products
        INNER JOIN accounts
        ON accounts.id = products.account_id
        WHERE products.account_id = #{id}
    </select>
    <!--購入後に在庫数を変更-->
    <update id="updateProductStock">
        UPDATE products
        SET stock = stock - #{number}
        WHERE id = #{productId}
    </update>
    <!--在庫が0かどうかチェック-->
    <select id="checkStockIsZero" resultType="boolean">
        SELECT CASE WHEN stock <![CDATA[ <= ]]> 0 THEN TRUE ELSE FALSE END
        FROM products
        WHERE id = #{productId}
    </select>

<!--    商品検索-->
    <select id="findAll" resultMap="Product">
        SELECT *  FROM products
        INNER JOIN (SELECT product_id as avg_product_id ,AVG(score) FROM reviews GROUP BY product_id)
        ON products.id = avg_product_id
        <where>
             <if test="searchForm.getKeyWord() != null and searchForm.getKeyWord().trim() != ''">
                products.category LIKE '%${searchForm.keyWord}%'OR products.name LIKE '%${searchForm.keyWord}%'
             </if>
            <if test="searchForm.getCategory() != null and searchForm.getCategory().trim() != ''">
                and products.category = '${searchForm.getCategory()}'
            </if>
            <if test="searchForm.getMinPrice() != null and searchForm.getMinPrice().trim() != '' and
                      searchForm.getMaxPrice() != null and searchForm.getMaxPrice().trim() != ''">
                and products.price BETWEEN ${searchForm.getMinPrice()} AND ${searchForm.getMaxPrice()}
            </if>
            <if test="searchForm.getMinPrice() != null and searchForm.getMinPrice().trim() != '' and
                      (searchForm.getMaxPrice() == null or searchForm.getMaxPrice().trim() == '')">
                and products.price BETWEEN ${searchForm.getMinPrice()} AND 1000000
            </if>
            <if test="(searchForm.getMinPrice() == null or searchForm.getMinPrice().trim() == '') and
                      searchForm.getMaxPrice() != null and searchForm.getMaxPrice().trim() != ''">
                and products.price BETWEEN 1 AND ${searchForm.getMaxPrice()}
            </if>
            <if test="searchForm.getStockCheck() == 2">
                and products.stock > 0
            </if>
            <if test="searchForm.getStockCheck() == 3">
                and products.stock = 0
            </if>
        </where>
            <if test="searchForm.getSort() == 1 or searchForm.getSort() == null">
                ORDER BY products.created_date DESC
            </if>
            <if test="searchForm.getSort() == 2 ">
                ORDER BY products.price ASC
            </if>
            <if test="searchForm.getSort() == 3 ">
                ORDER BY products.price DESC
            </if>
            <if test="searchForm.getSort() == 4 ">
                ORDER BY avg DESC
            </if>
    </select>
</mapper>